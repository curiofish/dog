import React, { useState } from 'react';
import { StyleSheet, View, ScrollView, Text, TouchableOpacity, SafeAreaView, Image } from 'react-native';
import { Checkbox, Card, ProgressBar } from 'react-native-paper';

const questions = {
  timeManagement: [
    {
      id: 'time1',
      text: 'ÌïòÎ£®Ïóê 2-3ÏãúÍ∞Ñ Ïù¥ÏÉÅ Í∞ïÏïÑÏßÄÏôÄ Ìï®Íªò ÏãúÍ∞ÑÏùÑ Î≥¥ÎÇº Ïàò ÏûàÎÇòÏöî?',
      info: 'Í∞ïÏïÑÏßÄÎäî ÎßéÏùÄ Í¥ÄÏã¨Í≥º ÏãúÍ∞ÑÏù¥ ÌïÑÏöîÌï©ÎãàÎã§. ÏÇ∞Ï±Ö, ÎÜÄÏù¥, ÌõàÎ†® Îì±Ïóê Ï∂©Î∂ÑÌïú ÏãúÍ∞ÑÏùÑ Ìï†Ïï†Ìï† Ïàò ÏûàÏñ¥Ïïº Ìï©ÎãàÎã§.'
    },
    {
      id: 'time2',
      text: 'Ï£ºÎßêÏóêÎèÑ Í∞ïÏïÑÏßÄÏôÄ ÏÇ∞Ï±ÖÌïòÍ≥† ÎÜÄÏïÑÏ§Ñ ÏãúÍ∞ÑÏù¥ ÏûàÎÇòÏöî?',
      info: 'Ï£ºÎßêÏóêÎèÑ Í∞ïÏïÑÏßÄÎäî Ïö¥ÎèôÍ≥º Í¥ÄÏã¨Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.'
    }
  ],
  responsibility: [
    {
      id: 'resp1',
      text: 'Îß§Ïùº ÏïÑÏπ®Ï†ÄÎÖÅÏúºÎ°ú Í∞ïÏïÑÏßÄ Î∞•ÏùÑ Ï±ôÍ≤®Ï§Ñ Ïàò ÏûàÎÇòÏöî?',
      info: 'Í∑úÏπôÏ†ÅÏù∏ ÏãùÏÇ¨ ÏãúÍ∞ÑÏùÄ Í∞ïÏïÑÏßÄÏùò Í±¥Í∞ïÏóê Îß§Ïö∞ Ï§ëÏöîÌï©ÎãàÎã§.'
    },
    {
      id: 'resp2',
      text: 'ÌïòÎ£®Ïóê 2-3Î≤à Í∞ïÏïÑÏßÄÎ•º ÏÇ∞Ï±ÖÏãúÌÇ¨ Ïàò ÏûàÎÇòÏöî?',
      info: 'Ï†ïÍ∏∞Ï†ÅÏù∏ ÏÇ∞Ï±ÖÏùÄ Í∞ïÏïÑÏßÄÏùò Ïã†Ï≤¥Ï†Å, Ï†ïÏã†Ï†Å Í±¥Í∞ïÏóê ÌïÑÏàòÏ†ÅÏûÖÎãàÎã§.'
    }
  ]
};

const getAdvice = (score) => {
  if (score >= 90) {
    return {
      title: 'ÌõåÎ•≠Ìïú Ï§ÄÎπÑ ÏÉÅÌÉúÏûÖÎãàÎã§! üëè',
      description: 'Í∞ïÏïÑÏßÄ ÏûÖÏñëÏùÑ ÏúÑÌïú Ï§ÄÎπÑÍ∞Ä Ïûò ÎêòÏñ¥ÏûàÎÑ§Ïöî. Îã§Ïùå Îã®Í≥ÑÎ°ú ÎÑòÏñ¥Í∞à Ï§ÄÎπÑÍ∞Ä ÎêòÏóàÏäµÎãàÎã§.',
      recommendations: [
        'ÏûÖÏñëÌïòÍ≥† Ïã∂ÏùÄ Í∞ïÏïÑÏßÄÏùò ÌíàÏ¢ÖÏóê ÎåÄÌï¥ Îçî ÏûêÏÑ∏Ìûà ÏïåÏïÑÎ≥¥ÏÑ∏Ïöî.',
        'Ï£ºÎ≥ÄÏùò Ïã†Î¢∞Ìï† Ïàò ÏûàÎäî Î≥¥Ìò∏ÏÜåÎÇò Î∏åÎ¶¨ÎçîÎ•º Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî.',
        'ÌïÑÏöîÌïú Î¨ºÌíàÎì§Ïùò Î™©Î°ùÏùÑ ÏûëÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî.'
      ]
    };
  } else if (score >= 70) {
    return {
      title: 'Ï¢ãÏùÄ Ï§ÄÎπÑ ÏÉÅÌÉúÏûÖÎãàÎã§! üåü',
      description: 'ÎåÄÏ≤¥Î°ú Ï§ÄÎπÑÍ∞Ä Ïûò ÎêòÏñ¥ÏûàÏßÄÎßå, Î™á Í∞ÄÏßÄ Îçî Í≥†Î†§Ìï¥Î≥º ÏÇ¨Ìï≠Ïù¥ ÏûàÏäµÎãàÎã§.',
      recommendations: [
        'Ï≤¥ÌÅ¨ÌïòÏßÄ Î™ªÌïú Ìï≠Î™©Îì§ÏùÑ Îã§Ïãú Ìïú Î≤à Í≤ÄÌÜ†Ìï¥Î≥¥ÏÑ∏Ïöî.',
        'Í∞ÄÏ°±Îì§Í≥º Ìï®Íªò Ï§ÄÎπÑ ÏÇ¨Ìï≠ÏùÑ ÏÉÅÏùòÌï¥Î≥¥ÏÑ∏Ïöî.',
        'ÏãúÍ∞Ñ Í¥ÄÎ¶¨ÏôÄ Ï±ÖÏûÑÍ∞êÏóê ÎåÄÌï¥ Îçî Íµ¨Ï≤¥Ï†ÅÏù∏ Í≥ÑÌöçÏùÑ ÏÑ∏ÏõåÎ≥¥ÏÑ∏Ïöî.'
      ]
    };
  } else if (score >= 50) {
    return {
      title: 'Ï°∞Í∏à Îçî Ï§ÄÎπÑÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§ ü§î',
      description: 'Í∞ïÏïÑÏßÄ ÏûÖÏñëÏùÑ ÏúÑÌï¥ Îçî ÎßéÏùÄ Ï§ÄÎπÑÍ∞Ä ÌïÑÏöîÌï¥ Î≥¥ÏûÖÎãàÎã§.',
      recommendations: [
        'Ï≤¥ÌÅ¨ÌïòÏßÄ Î™ªÌïú Ìï≠Î™©Îì§Ïóê ÎåÄÌïú Ìï¥Í≤∞ Î∞©ÏïàÏùÑ Ï∞æÏïÑÎ≥¥ÏÑ∏Ïöî.',
        'Í∞ïÏïÑÏßÄ ÎèåÎ¥ÑÏóê ÎåÄÌï¥ Îçî ÎßéÏù¥ Í≥µÎ∂ÄÌï¥Î≥¥ÏÑ∏Ïöî.',
        'ÌòÑÏã§Ï†ÅÏù∏ ÏãúÍ∞Ñ Í¥ÄÎ¶¨ Í≥ÑÌöçÏùÑ ÏÑ∏ÏõåÎ≥¥ÏÑ∏Ïöî.'
      ]
    };
  } else {
    return {
      title: 'ÏïÑÏßÅ Ï§ÄÎπÑÍ∞Ä Îçî ÌïÑÏöîÌï©ÎãàÎã§ üí≠',
      description: 'Í∞ïÏïÑÏßÄ ÏûÖÏñëÏùÄ ÌÅ∞ Ï±ÖÏûÑÏù¥ Îî∞Î•¥Îäî Í≤∞Ï†ïÏûÖÎãàÎã§. Ï≤úÏ≤úÌûà Ï§ÄÎπÑÌï¥Î≥¥ÏÑ∏Ïöî.',
      recommendations: [
        'Í∞ïÏïÑÏßÄ ÎèåÎ¥ÑÏóê ÎåÄÌïú Í∏∞Î≥∏Ï†ÅÏù∏ ÏßÄÏãùÏùÑ ÏåìÏïÑÎ≥¥ÏÑ∏Ïöî.',
        'ÏÉùÌôú Ìå®ÌÑ¥ÏùÑ Í∞ïÏïÑÏßÄÏôÄ Ìï®Íªò ÏÇ¥Í∏∞Ïóê Ï†ÅÌï©ÌïòÍ≤å Ï°∞Ï†ïÌï¥Î≥¥ÏÑ∏Ïöî.',
        'Îã§Î•∏ Í∞ïÏïÑÏßÄÎ•º ÌÇ§Ïö∞Îäî Í∞ÄÏ†ïÏùò Í≤ΩÌóòÎã¥ÏùÑ Îì§Ïñ¥Î≥¥ÏÑ∏Ïöî.'
      ]
    };
  }
};

export default function App() {
  const [checkedItems, setCheckedItems] = useState({});
  const [score, setScore] = useState(null);
  const [advice, setAdvice] = useState(null);

  const handleCheck = (id) => {
    setCheckedItems(prev => ({
      ...prev,
      [id]: !prev[id]
    }));
  };

  const calculateScore = () => {
    const totalQuestions = Object.values(questions).reduce((acc, curr) => acc + curr.length, 0);
    const checkedCount = Object.values(checkedItems).filter(Boolean).length;
    const percentage = Math.round((checkedCount / totalQuestions) * 100);
    setScore(percentage);
    setAdvice(getAdvice(percentage));
  };

  const renderQuestionSection = (title, questionList) => (
    <Card style={styles.section}>
      <Card.Content>
        <Text style={styles.sectionTitle}>{title}</Text>
        {questionList.map(question => (
          <View key={question.id} style={styles.questionContainer}>
            <View style={styles.questionRow}>
              <Checkbox
                status={checkedItems[question.id] ? 'checked' : 'unchecked'}
                onPress={() => handleCheck(question.id)}
                color="#4A90E2"
              />
              <Text style={styles.questionText}>{question.text}</Text>
            </View>
            <Text style={styles.infoText}>{question.info}</Text>
          </View>
        ))}
      </Card.Content>
    </Card>
  );

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView>
        <View style={styles.header}>
          <Text style={styles.title}>Í∞ïÏïÑÏßÄ ÏûÖÏñë Ï§ÄÎπÑ Ï†ïÎèÑ Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏</Text>
          <Text style={styles.subtitle}>Ï±ÖÏûÑÍ∞ê ÏûàÎäî Î∞òÎ†§ÎèôÎ¨º ÏûÖÏñëÏùÑ ÏúÑÌïú Ï≤´Í±∏Ïùå</Text>
        </View>

        {renderQuestionSection('ÏãúÍ∞Ñ Í¥ÄÎ¶¨', questions.timeManagement)}
        {renderQuestionSection('Ï±ÖÏûÑÍ∞ê', questions.responsibility)}
        
        <TouchableOpacity style={styles.button} onPress={calculateScore}>
          <Text style={styles.buttonText}>Í≤∞Í≥º ÌôïÏù∏ÌïòÍ∏∞</Text>
        </TouchableOpacity>

        {score !== null && (
          <Card style={styles.resultContainer}>
            <Card.Content>
              <Text style={styles.resultTitle}>ÎãπÏã†Ïùò Ï§ÄÎπÑ Ï†ïÎèÑ</Text>
              <View style={styles.scoreContainer}>
                <Text style={styles.score}>{score}%</Text>
                <ProgressBar
                  progress={score / 100}
                  color="#4A90E2"
                  style={styles.progressBar}
                />
              </View>
              
              {advice && (
                <View style={styles.adviceContainer}>
                  <Text style={styles.adviceTitle}>{advice.title}</Text>
                  <Text style={styles.adviceDescription}>{advice.description}</Text>
                  <View style={styles.recommendationsContainer}>
                    <Text style={styles.recommendationsTitle}>Ï∂îÏ≤ú ÏÇ¨Ìï≠:</Text>
                    {advice.recommendations.map((recommendation, index) => (
                      <View key={index} style={styles.recommendationItem}>
                        <Text style={styles.recommendationBullet}>‚Ä¢</Text>
                        <Text style={styles.recommendationText}>{recommendation}</Text>
                      </View>
                    ))}
                  </View>
                </View>
              )}
            </Card.Content>
          </Card>
        )}
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    padding: 20,
    backgroundColor: '#4A90E2',
    alignItems: 'center',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: 'white',
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: 'rgba(255, 255, 255, 0.8)',
    marginTop: 5,
  },
  section: {
    margin: 10,
    elevation: 4,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 15,
    color: '#4A90E2',
  },
  questionContainer: {
    marginBottom: 15,
  },
  questionRow: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  questionText: {
    flex: 1,
    marginLeft: 10,
    fontSize: 16,
  },
  infoText: {
    marginLeft: 40,
    marginTop: 5,
    fontSize: 14,
    color: '#666',
    fontStyle: 'italic',
  },
  button: {
    backgroundColor: '#4A90E2',
    padding: 15,
    margin: 10,
    borderRadius: 10,
    alignItems: 'center',
    elevation: 3,
  },
  buttonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  resultContainer: {
    margin: 10,
    elevation: 4,
  },
  scoreContainer: {
    alignItems: 'center',
    marginVertical: 20,
  },
  score: {
    fontSize: 48,
    fontWeight: 'bold',
    color: '#4A90E2',
    marginBottom: 10,
  },
  progressBar: {
    height: 10,
    width: '100%',
    borderRadius: 5,
  },
  adviceContainer: {
    marginTop: 20,
  },
  adviceTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#4A90E2',
    marginBottom: 10,
  },
  adviceDescription: {
    fontSize: 16,
    color: '#666',
    marginBottom: 20,
    lineHeight: 24,
  },
  recommendationsContainer: {
    backgroundColor: '#f8f9fa',
    padding: 15,
    borderRadius: 10,
  },
  recommendationsTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
    color: '#4A90E2',
  },
  recommendationItem: {
    flexDirection: 'row',
    marginBottom: 10,
  },
  recommendationBullet: {
    fontSize: 16,
    color: '#4A90E2',
    marginRight: 10,
  },
  recommendationText: {
    flex: 1,
    fontSize: 16,
    color: '#333',
    lineHeight: 24,
  },
}); 